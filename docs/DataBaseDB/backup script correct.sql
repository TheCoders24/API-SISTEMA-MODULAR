-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.auditoria
(
    id serial NOT NULL,
    tabla_afectada character varying(100) COLLATE pg_catalog."default" NOT NULL,
    accion character varying(20) COLLATE pg_catalog."default" NOT NULL,
    id_registro integer,
    fecha timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    detalles text COLLATE pg_catalog."default",
    usuario_nombre character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT auditoria_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.categorias
(
    id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categorias_pkey PRIMARY KEY (id),
    CONSTRAINT categorias_nombre_key UNIQUE (nombre)
);

CREATE TABLE IF NOT EXISTS public.configuraciones
(
    id serial NOT NULL,
    clave character varying(100) COLLATE pg_catalog."default" NOT NULL,
    valor text COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    CONSTRAINT configuraciones_pkey PRIMARY KEY (id),
    CONSTRAINT configuraciones_clave_key UNIQUE (clave)
);

CREATE TABLE IF NOT EXISTS public.detalle_devoluciones
(
    id serial NOT NULL,
    devolucion_id integer NOT NULL,
    producto_id integer NOT NULL,
    cantidad integer NOT NULL,
    precio numeric(10, 2) NOT NULL,
    CONSTRAINT detalle_devoluciones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detalle_pedidos_proveedores
(
    id serial NOT NULL,
    pedido_id integer NOT NULL,
    producto_id integer NOT NULL,
    cantidad integer NOT NULL,
    precio numeric(10, 2) NOT NULL,
    CONSTRAINT detalle_pedidos_proveedores_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.detalle_ventas
(
    id serial NOT NULL,
    venta_id integer NOT NULL,
    producto_id integer NOT NULL,
    cantidad integer NOT NULL,
    precio numeric(10, 2) NOT NULL,
    CONSTRAINT detalle_ventas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.devoluciones
(
    id serial NOT NULL,
    venta_id integer NOT NULL,
    fecha timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    motivo text COLLATE pg_catalog."default",
    usuario_id integer,
    CONSTRAINT devoluciones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.historial_precios
(
    id serial NOT NULL,
    producto_id integer NOT NULL,
    precio_anterior numeric(10, 2) NOT NULL,
    precio_nuevo numeric(10, 2) NOT NULL,
    fecha_cambio timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    usuario_id integer,
    CONSTRAINT historial_precios_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.metricas
(
    id serial NOT NULL,
    tipo_metrica character varying(50) COLLATE pg_catalog."default" NOT NULL,
    valor text COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT metricas_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.movimientos
(
    id serial NOT NULL,
    producto_id integer NOT NULL,
    tipo character varying(20) COLLATE pg_catalog."default" NOT NULL,
    cantidad integer NOT NULL,
    fecha timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    usuario_id integer,
    CONSTRAINT movimientos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.pedidos_proveedores
(
    id serial NOT NULL,
    proveedor_id integer NOT NULL,
    fecha_pedido timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_entrega timestamp with time zone,
    total numeric(10, 2) NOT NULL,
    CONSTRAINT pedidos_proveedores_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.productos
(
    id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    descripcion text COLLATE pg_catalog."default",
    precio numeric(10, 2) NOT NULL,
    stock integer NOT NULL,
    categoria_id integer,
    proveedor_id integer,
    CONSTRAINT productos_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.proveedores
(
    id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    contacto character varying(100) COLLATE pg_catalog."default",
    telefono character varying(20) COLLATE pg_catalog."default",
    email character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT proveedores_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.registroactividad
(
    id serial NOT NULL,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    ip character varying(45) COLLATE pg_catalog."default" NOT NULL,
    fecha timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    accion character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT registroactividad_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    nombre character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_nombre_key UNIQUE (nombre)
);

CREATE TABLE IF NOT EXISTS public.sesiones
(
    id serial NOT NULL,
    usuario_id integer NOT NULL,
    token character varying(512) COLLATE pg_catalog."default" NOT NULL,
    fecha_inicio timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    fecha_fin timestamp with time zone,
    activa boolean DEFAULT true,
    CONSTRAINT sesiones_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.usuarios
(
    id serial NOT NULL,
    nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password character varying(512) COLLATE pg_catalog."default" NOT NULL,
    fecha_registro timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    is_active boolean DEFAULT true,
    CONSTRAINT usuarios_pkey PRIMARY KEY (id),
    CONSTRAINT usuarios_email_key UNIQUE (email)
);

COMMENT ON TABLE public.usuarios
    IS 'Tabla que almacena la información de los usuarios del sistema.';

COMMENT ON COLUMN public.usuarios.password
    IS 'Contraseña encriptada del usuario.';

CREATE TABLE IF NOT EXISTS public.usuarios_roles
(
    usuario_id integer NOT NULL,
    rol_id integer NOT NULL,
    CONSTRAINT usuarios_roles_pkey PRIMARY KEY (usuario_id, rol_id)
);

CREATE TABLE IF NOT EXISTS public.ventas
(
    id serial NOT NULL,
    fecha timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
    total numeric(10, 2) NOT NULL,
    usuario_id integer,
    CONSTRAINT ventas_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.detalle_devoluciones
    ADD CONSTRAINT detalle_devoluciones_devolucion_id_fkey FOREIGN KEY (devolucion_id)
    REFERENCES public.devoluciones (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.detalle_devoluciones
    ADD CONSTRAINT detalle_devoluciones_producto_id_fkey FOREIGN KEY (producto_id)
    REFERENCES public.productos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.detalle_pedidos_proveedores
    ADD CONSTRAINT detalle_pedidos_proveedores_pedido_id_fkey FOREIGN KEY (pedido_id)
    REFERENCES public.pedidos_proveedores (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.detalle_pedidos_proveedores
    ADD CONSTRAINT detalle_pedidos_proveedores_producto_id_fkey FOREIGN KEY (producto_id)
    REFERENCES public.productos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.detalle_ventas
    ADD CONSTRAINT detalle_ventas_producto_id_fkey FOREIGN KEY (producto_id)
    REFERENCES public.productos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.detalle_ventas
    ADD CONSTRAINT detalle_ventas_venta_id_fkey FOREIGN KEY (venta_id)
    REFERENCES public.ventas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.devoluciones
    ADD CONSTRAINT devoluciones_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.devoluciones
    ADD CONSTRAINT devoluciones_venta_id_fkey FOREIGN KEY (venta_id)
    REFERENCES public.ventas (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.historial_precios
    ADD CONSTRAINT historial_precios_producto_id_fkey FOREIGN KEY (producto_id)
    REFERENCES public.productos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.historial_precios
    ADD CONSTRAINT historial_precios_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.movimientos
    ADD CONSTRAINT movimientos_producto_id_fkey FOREIGN KEY (producto_id)
    REFERENCES public.productos (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.movimientos
    ADD CONSTRAINT movimientos_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.pedidos_proveedores
    ADD CONSTRAINT pedidos_proveedores_proveedor_id_fkey FOREIGN KEY (proveedor_id)
    REFERENCES public.proveedores (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.productos
    ADD CONSTRAINT productos_categoria_id_fkey FOREIGN KEY (categoria_id)
    REFERENCES public.categorias (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.productos
    ADD CONSTRAINT productos_proveedor_id_fkey FOREIGN KEY (proveedor_id)
    REFERENCES public.proveedores (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.sesiones
    ADD CONSTRAINT sesiones_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.usuarios_roles
    ADD CONSTRAINT usuarios_roles_rol_id_fkey FOREIGN KEY (rol_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.usuarios_roles
    ADD CONSTRAINT usuarios_roles_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.ventas
    ADD CONSTRAINT ventas_usuario_id_fkey FOREIGN KEY (usuario_id)
    REFERENCES public.usuarios (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;

END;